# Problema de Fatoracao com threads
#Aluno: Fábio Henrique Cypreste de Assis
#Turma: CC7N

import queue
import threading
import time

class MyThread(threading.Thread):
    def __init__(self, name):
        threading.Thread.__init__(self)
        self.name = name

    def run(self):
        print("Iniciando thread %s." % self.name)
        ProcessandoFila()
        print("Encerrando thread %s." % self.name)

def ProcessandoFila():
    while True:
        try:
            item = my_queue.get(block=False)
            if isinstance(item, tuple):  # Se for uma tupla (prioridade, valor), pegamos apenas o valor
                x = item[1]
            else:
                x = item
        except queue.Empty:
            return
        else:
            Fatoracao(x)
        time.sleep(1)

def Fatoracao(x):
    resultado = 'Fatores positivos de %i sao: ' % x
    for i in range(1, x + 1):
        if x % i == 0:
            resultado += str(i) + ' '
    resultado += '\n' + '_' * 30
    print(resultado)

def InicializarThread():
    thread1 = MyThread('A')
    thread2 = MyThread('B')
    thread3 = MyThread('C')

    thread1.start()
    thread2.start()
    thread3.start()

    thread1.join()
    thread2.join()
    thread3.join()

def Lifo(input_):
    print("Utilizado LIFO: ")
    global my_queue
    my_queue = queue.LifoQueue()
    
    for i in input_:
        my_queue.put(i)
    InicializarThread()
    print('\n', 'Concluida execução utilizando LIFO! \n')

def PriorityQueue(input_):
    print("Utilizando Priority Queue")
    global my_queue
    my_queue = queue.PriorityQueue()
    prioridade = [2, 3, 0, 1]

    for prioridade, valor in zip(prioridade, input_):
        my_queue.put((prioridade, valor))

#Código main
input_ = [1, 10, 4, 3]

if __name__ == "__main__":
    Lifo(input_)
    PriorityQueue(input_)

print('Concluído!')
